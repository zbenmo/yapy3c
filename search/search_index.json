{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Yet Another Python3 Course (YAPY3C)","text":"<p>My name is Oren, and I'll be your instructor.</p> <p>You can contact me at 'zbenmo@gmail.com'.</p>"},{"location":"part_I/","title":"part I","text":"<p>In Part I we learn the basics, data types, and the structure of a program.</p> <p>Let\u2019s get an access to a Python environment. The following should work for you:</p> <p>https://www.python.org/shell/</p> <p>There are a few versions of Python, we\u2019ll use Python 3. Let\u2019s make sure this is what we have. run there (in your shell):</p> <pre><code>import sys\nprint(sys.version)\n</code></pre> <p>For me it printed: 3.8.0, which is good.</p> <p>You see above, that we had to import 'sys'. Otherwise sys wasn\u2019t available. Once we imported it, sys.version was the version of the current Python interpreter (the running environment above). The print statement just shows us what we\u2019ve imported. We did not need to import anything special to have \u2018print\u2019.</p> <p>Let\u2019s try just</p> <pre><code>sys.version\n</code></pre> <p>It also prints the value (3.8.0 for me). This is as we\u2019re in an interactive shell, but generally, unless we print something, an expression, as sys.version, or 3 + 4, is just yet another expression, and does not show in the output. We can omit the 'print' here, as in this exercise, we\u2019ll be in the interactive shell. Let\u2019s try:</p> <pre><code>3 + 4\n</code></pre> <p>We get a new value. To see the type of a value, we use for example:</p> <pre><code>type(3)\n</code></pre> <p>We get:</p> <p><code>&lt;class 'int'&gt;</code>  (an integer)</p> <p>What about \u2018hello\u2019, what is its type?</p> <p>We get:</p> <p><code>&lt;class 'str'&gt;</code> (a string)</p> <p>If you happen to use \u201chello\u201d it should be the same, both should work.</p> <pre><code>my_list = [1, 2, 4]\ntype(my_list)\n</code></pre> <p>We should get:</p> <p><code>&lt;class 'list'&gt;</code></p> <p>Note above, that we assigned the value into a variable, my_list. This is handy as to use later in a program.</p> <p>A list can be also constructed as follows:</p> <pre><code>list('hello')\n</code></pre> <p><code>['h', 'e', 'l', 'l', 'o']</code></p> <p>The characters in the string became each an element in the list.</p> <p>With lists you can take slices, we\u2019ll use the variable my_list from above to demonstrate:</p> <pre><code>my_list[1:]\n</code></pre> <p><code>[2, 4]</code></p> <pre><code>my_list[:2]\n</code></pre> <p><code>[1, 2]</code></p> <p>Clarification: a single element, for example the first, will be my_list[0], a slice can be for example my_list[1:4], or as above (1:, means from the second to the end, and :2 means up to but not including index 2, therefore the first two elements).</p> <p>Note: the first index is 0. So the valid indices for a list \u2018lst\u2019 are: 0..len(lst) - 1 (ex. when len(lst) == 3 then the valid indices are 0, 1, 2).</p> <p>Slices are also lists, try to get the type of a slice.</p> <p>A list can be of mixed types, and also nested:</p> <pre><code>[1, 'Dog', my_list]\n</code></pre> <p><code>[1, 'Dog', [1, 2, 4]]</code></p> <p>But usually, we\u2019ll use lists where the elements are of the same type.</p> <p>Let\u2019s have a function:</p> <pre><code>def add(a, b):\nreturn a + b\nadd(1, 4)\n</code></pre> <p><code>5</code></p> <pre><code>add('abc', 'def')\n</code></pre> <p><code>'abcdef'</code></p> <pre><code>add(1, 'def')\n</code></pre> <pre><code>Traceback (most recent call last):\n File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n File \"&lt;stdin&gt;\", line 2, in add\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n</code></pre> <p>So we\u2019ve seen that the same function, add, was good for integers and for strings. For strings \u2018+\u2019 means concatenation. When we tried mixed arguments. The call started as expected, but then \u2018+\u2019 is not defined between an integer and \u2018str\u2019. And so we got an error, or as it is called in Python an exception. If we wrote it in a software product, this would either be considered a bug, or it can be handled in run time, with some more control flow constructs (later).</p> <p>We can solve it by converting the integer first to a string:</p> <pre><code>str(1) + 'def'\n</code></pre> <p><code>'1def'</code></p> <p>If we look for a second at the definition of the function above, we see that we\u2019ve started with the word \u2018def\u2019, then gave the name of the new function, then a parameters list in parentheses, then the column, and inside the function commands were indented with a tab or a few spaces. The last statement in a function is often return with the calculated value as the output of the function.</p> <pre><code>type(add)\n</code></pre> <p><code>&lt;class 'function'&gt;</code></p> <p>And we can also assign a function to a variable (note: not adding the parentheses   as in a call). The variable can later be activated (called).</p> <pre><code>a_func = add\na_func(9, 8)\n</code></pre> <p><code>17</code></p> <p>Remember, every time you have a value or a variable and you are not sure what it is, debug by printing its type.</p> <pre><code>print(type(print))\n</code></pre> <p><code>&lt;class 'builtin_function_or_method'&gt;</code></p> <pre><code>print(type(sys))\n</code></pre> <p><code>&lt;class 'module'&gt;</code></p> <pre><code>print(type(5 / 2))\n</code></pre> <p><code>&lt;class 'float'&gt;</code></p> <p>It is not anymore an integer. Dividing an integer by another integer results in a float.</p> <pre><code>5 // 2\n</code></pre> <p><code>2</code></p> <p>Here the result is an integer, and it wasn\u2019t rounded but rather truncated.</p> <p>We\u2019ve seen before the type list, that is very useful. Another useful type is a dictionary, or dict. It is also referred to sometimes as associative memory. You have keys, and you have values. In a list, you use indices to address the content. Otherwise it is similar.</p> <pre><code>{'a': 4, 'b': 'Vier'} # One way to create a 'dict'\nmy_dict = dict() # yet another way to create a 'dict'\nmy_dict['my_key'] = 'your_value'\nmy_dict\n</code></pre> <p><code>{'my_key': 'your_value'}</code></p> <p>We have added an entry here to an existing dictionary. To add values to a list, we can for example do:</p> <pre><code>my_list.append('Marshmello')\nmy_list\n</code></pre> <p><code>[1, 2, 4, 'Marshmello']</code></p> <p>There is also a useful type, a tuple. For example:</p> <pre><code>my_tuple = (1, 3, 'g')\nmy_tuple\n</code></pre> <p><code>(1, 3, 'g')</code></p> <pre><code>type(my_tuple)\n</code></pre> <p><code>&lt;class 'tuple'&gt;</code></p> <p>You can access elements of a tuple as you do with a list, yet a tuple is an immutable sequence.</p> <pre><code>my_tuple[0] = 2\n</code></pre> <pre><code>Traceback (most recent call last):\n File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'tuple' object does not support item assignment\n</code></pre> <pre><code>my_tuple.append('Baby')\n</code></pre> <pre><code>Traceback (most recent call last):\n File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'tuple' object has no attribute 'append'\n</code></pre> <p>Tuples are useful in many cases. For example we can assign values to two variables at the same time.</p> <pre><code>old, new = 'Trump', 'Biden'\n</code></pre> <p>Here the parentheses are implicit. Also, sometimes a function can return multiple values, and this can be done with returning a \u2018dict\u2019, or a \u2018list\u2019, but also sometimes as a tuple.</p> <pre><code>for k, v in my_dict.items():\nprint(k, v)\n</code></pre> <p><code>my_key your_value</code></p> <p>Note, above is a for loop. Its structure somewhat resembles a function definition (the column, and the indentation). We got here two loop variables, k and v, as the function items of \u2018dict\u2019 instances returns an iterator of two values each iteration. We then printed those two in one \u2018print\u2019 statement. We happened to have only one key-value pair in the dictionary above.</p> <p>Here is another example of a 'for' loop:</p> <pre><code>my_sum = 0\nfor i in range(3):\nmy_sum += i\nmy_sum\n</code></pre> <p><code>3</code></p> <p>We initialized my_sum to zero, then we added 0, 1, and finally 2, to get 3.</p> <pre><code>type(range(3))\n</code></pre> <p><code>&lt;class 'range'&gt;</code></p> <p>range resembes a list of consequtive integers that is not mutable. We did not need to create and initialize a list, and also the 'range' has the advantage that it keeps its values in its \"stomach\", and only makes them available when we iterate over it. If we want the explicit values, we can do:</p> <pre><code>list(range(5))\n</code></pre> <p><code>[0, 1, 2, 3, 4]</code></p> <p>We could have done above also simpler, by using the builtin function \u2018sum\u2019:</p> <pre><code>sum(range(3))\n</code></pre> <p><code>3</code></p> <p>Here is a small example of a function that returns two values, using the builtin functions \u2018min\u2019, and \u2018max\u2019.</p> <pre><code>def min_and_max(a_list):\nreturn min(a_list), max(a_list)\nmin_and_max(range(6))\n</code></pre> <p><code>(0, 5)</code></p> <pre><code>min_and_max([4, 1, 3])\n</code></pre> <p><code>(1, 4)</code></p> <p>Next we\u2019ll see boolean conditions and an if statement. This is also very important to control the flow of the program.</p> <pre><code>len(my_list)\n</code></pre> <p><code>4</code></p> <p>So the built-in function 'len' gives the length of a list. Good to know!</p> <pre><code>if len(my_list) &gt; 3:\nprint('it is')\n</code></pre> <p><code>it is</code></p> <p>And the type of the expression: len(my_list) &gt; 3, is:</p> <pre><code>type(len(my_list) &gt; 3)\n</code></pre> <p><code>&lt;class 'bool'&gt;</code></p> <p>Below is a function to reverse a string (or a list), and a call to that function.</p> <pre><code>def my_reverse(a_string):\nif len(a_string) &lt; 2:\nreturn a_string\nelse:\nreturn my_reverse(a_string[1:]) + a_string[0:1]\nmy_reverse('maar')\n</code></pre> <p>'raam'</p> <pre><code>my_reverse([3, 4, 5])\n</code></pre> <pre><code>[5, 4, 3]\n</code></pre> <p>Note, the implementation of the above function, is based on the function itself. This kind of implementation is called recursion. Recursion is a bit more advanced way of writing stuff, but sometimes it is actually simpler. If using recursion, pay attention to a stopping condition. The problems should become simpler and simpler, and in the final steps, you should return a simple value, as was the case above when the string was short and its reverse is actually the same value.</p> <p>I\u2019ve checked the builtin \u2018reversed\u2019 function. It behaves a little differently for a list, or for a string.</p> <pre><code>list(reversed([1,2,3]))\n</code></pre> <pre><code>[3, 2, 1]\n</code></pre> <pre><code># this is what we had before\nlist(reversed('gadol'))\n</code></pre> <pre><code>['l', 'o', 'd', 'a', 'g']\n</code></pre> <pre><code># but for a string, we\u2019ll get the list of characters (reversed).\n</code></pre> <p>BTW, \u2018#\u2019 and then text is a comment, and can be used in a program to help the reader follow the logic. \u2018#\u2019 can start after some other code, and from there it is a comment.</p> <p>Strings, have some functionality that we\u2019ve not explored before, for example:</p> <pre><code>\"hello\".upper()\n</code></pre> <pre><code>'HELLO'\n</code></pre>"},{"location":"part_I/#exercise","title":"Exercise","text":"<p>The exercise will be to approximate \ud835\udf45 by sampling. Let\u2019s say we have a circle with radius 1. What is its area? Now take a 1 by 1 square. And draw there a quarter of the above circle. The origin <code>(0, 0)</code> is the center of the (quarter) circle. The area of the square is <code>1 * 1 == 1</code>. The area of the quarter circle is <code>\ud835\udf45 / 4</code>. Let\u2019s sample a point from the rectangle. We\u2019ll do that by sampling x between 0 and 1, and y between 0 and 1. If <code>(x, y)</code> falls within the quarter circle, we\u2019ll count it in, otherwise, we\u2019ll not count it. After enough samples, the number of counted points, divided by the total number of samples, should approximate <code>\ud835\udf45 / 4</code>. As a check of your work, compare the value that you got for \ud835\udf45 (after multypling by 4) to the number you get from:</p> <pre><code>import math\nmath.pi\n</code></pre> <p>Guidance:</p> <p>The following code demonstrates sampling random numbers between 0 and 1 (each of type float). Remember that you need for each iteration two random numbers, one for x and another for y, and that the point <code>(x, y)</code> is at square distance of <code>x ** 2 + y ** 2</code> from the origin:</p> <pre><code>import random\nx, y = random.random(), random.random()\nsquare_distance = x ** 2 + y ** 2\n</code></pre> <p>Implement your code as a function that receives a parameter for the number of trials, and returns the approximated \ud835\udf45. It is a good idea to write the code in an editor of your preference, and to paste the code to the interactive Python shell, so you can avoid retyping the code for each fix.</p>"},{"location":"part_II_np/","title":"Part II (numpy)","text":"<p>We take a little break from pure Python, and introduce a very useful package numpy. It is not part of the standard library yet easily installed, for example with:</p> <pre><code>pip install numpy\n</code></pre> <p>We import the package and follow the convention to alias it np:</p> <pre><code>import numpy as np\ntype(np)\n</code></pre> <p><code>module</code></p> <p>Why did I say a package? A package may have multiple modules. We\u2019ll talk about it later.</p> <p>So why is it worth it to learn about 'numpy'? Well, first it is an example of yet another useful package. Python is great, yet it is really great thanks to the ecosystem around it. There are packages for data science, packages that are part of web frameworks, packages for developing games. In particular, 'numpy', appears almost always (at least with Python software I've played with).</p> <p>The theme of 'numpy' is linear algebra. For example, one can wrap a list into 'numpy.ndarray' (n-dimensional array).</p> <pre><code>arr = np.array([1, 2, 3])\narr.shape\n</code></pre> <p><code>(3,)</code></p> <p>len(arr) will also work and shall return 3.</p> <p>The 'shape' returns a tuple where each entry is the length of the relevant dimension. Note the comma in (3,). This is to distinguish this value, the tuple, from (3) which is just the scalar 3 after the expression is evaluated.</p> <p>An important observation is that while a simple list can contain heterogeneous values, a 'numpy' array is expected to hold values of the same type in all cells. In addition to many goodies that we'll see soon, 'numpy' is intended to make the calculations fast and vectorized. Vectorisation is a technique where special hardware manipulate multiple cells at the same time.</p> <p>To find the type of the elements themselves, use:</p> <p><pre><code>arr.dtype\n</code></pre> In this example it is <code>dtype('int64')</code>.</p> <p>To find the dimension of a 'numpy' array, one can do:</p> <pre><code>len(arr.shape)\n</code></pre> <p><code>1</code></p> <p>Here BTW we see that 'len' works also on a tuple.</p> <p>To find how many elements in a 'numpy' array, I would go for:</p> <pre><code>np.prod(arr.shape)\n</code></pre> <p><code>3</code></p> <p>Above, we see a nice utility function from 'numpy' that takes an iterable, in this case the tuple arr.shape, and returns the product of the elements.</p> <p>Let's go to the next dimension:</p> <pre><code>mat = np.array([[1, 2], [1, 0], [2, 1]]); mat\n</code></pre> <pre><code>array([[1, 2],\n       [1, 0],\n       [2, 1]])\n</code></pre> <p>We used ';' to separate two expressions. The last expression mat is what we see in the interactive shell. We see that we got a matrix with 3 rows and 2 columns.</p> <pre><code>len(mat.shape), np.prod(mat.shape)\n</code></pre> <p><code>(2, 6)</code></p> <p>Here we used ',' between the two expressions. This gave us the tuple (2, 6). The first element of the tuple is the dimention of mat and the other is the count of elements in mat (similar to what we've verified above for arr).</p> <p>A 2-dimentional 'numpy' array or, a \"matrix\" has two axes; 0 and 1. One axis is the rows and the other is the columns. Let's see that in action:</p> <pre><code>np.sum(mat), np.sum(mat, axis=0), np.sum(mat, axis=1)\n</code></pre> <p><code>(7, array([4, 3]), array([3, 1, 3]))</code></p> <p>We can see that without the axis parameter we get a scalar which is the sum of all the elements. With axis=0 the rows collapse and we get the summation per columns. With axis=1 the columns collapse, and we end up with as many entries in the result 'numpy' array as we had rows. </p> <p>Let's try the following advanced exercise. We're given a matrix. We return another matrix according to the following rules. If a cell in the input matrix is zero, the matching \"cell\" in the return matrix will be 3 by 3 zeros. Otherwise, a none zero value, will result with a matching \"cell\" of 3 by 3 ones. It will get soon clear when you'll see the output examples.</p> <pre><code>def inflate(input_matrix):\nres = []\nfor row in range(0, input_matrix.shape[0]):\nres_row = []\nfor col in range(0, input_matrix.shape[1]):\nsubmatrix = input_matrix[row:row + 1, col:col + 1]\ntransformed = np.zeros((3, 3)) if submatrix == 0 else np.ones((3, 3))\nres_row.append(transformed)\nres.append(np.concatenate(res_row, axis=1))\nreturn np.concatenate(res, axis=0)\n</code></pre> <pre><code>array([[1., 1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1., 1.],\n       [1., 1., 1., 0., 0., 0.],\n       [1., 1., 1., 0., 0., 0.],\n       [1., 1., 1., 0., 0., 0.],\n       [1., 1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1., 1.]])\n</code></pre> <p>Note that, on line 6 we access a submatrix (in this case just 1 by 1) using indices (similar to slicing in lists).</p> <p>The assignment to the variable transformed on line 7 needs a clarification. This is the equivalent of the trianary operator from C/C++. In C we have <code>cond ? val_when_true : val_when_false</code>. With Python this would be <code>val_when_true if cond else val_when_false</code>.</p> <p>Maybe there is a smarter way to achieve what was done above in the function inflate. That is what I came up with.</p> <p>And now it is your turn.</p>"},{"location":"part_II_np/#exercise","title":"Exercise","text":"<p>This course is originated in the Netherlands . Which means that we need to do something with a windmill. Here are some building blocks that may help.</p> <pre><code>np.tri(4)\n</code></pre> <pre><code>array([[1., 0., 0., 0.],\n       [1., 1., 0., 0.],\n       [1., 1., 1., 0.],\n       [1., 1., 1., 1.]])\n</code></pre> <pre><code>np.tri(4).T # transpose\n</code></pre> <pre><code>array([[1., 1., 1., 1.],\n       [0., 1., 1., 1.],\n       [0., 0., 1., 1.],\n       [0., 0., 0., 1.]])\n</code></pre> <pre><code>np.flip(np.tri(4), axis=0)\n</code></pre> <pre><code>array([[1., 1., 1., 1.],\n       [1., 1., 1., 0.],\n       [1., 1., 0., 0.],\n       [1., 0., 0., 0.]])\n</code></pre>"}]}